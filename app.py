# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13p5LwzxZjXEdCxUjiW1Bm1W_njzCoYSZ
"""

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import streamlit as st
import pandas as pd
import plotly.express as px
import pdfkit

# 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î theme ‡πÅ‡∏•‡∏∞ layout
st.set_page_config(page_title="AVA Property Scraper", layout="wide")

# 2. ‡∏õ‡∏£‡∏±‡∏ö UI ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ CSS
st.markdown("""
<style>
    .stApp {
        background-color: #f9f9f9;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .stButton button {
        background-color: #007BFF;
        color: white;
        border-radius: 10px;
        padding: 10px 20px;
        font-weight: bold;
    }
    .stTextInput input {
        border-radius: 8px;
    }
    .stSelectbox select {
        border-radius: 8px;
    }
</style>
""", unsafe_allow_html=True)

# 3. ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
st.title("üìä AVA Property Scraper")
st.markdown("### ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ scraping ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå")

# 4. ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
col1, col2 = st.columns(2)

with col1:
    project_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏§‡∏Å‡∏©‡∏≤")
    property_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô", ["‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î", "‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå", "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß", "‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô"])

with col2:
    area_unit = st.radio("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà", ["‡∏ï‡∏£.‡∏ß‡∏≤", "‡∏ï‡∏£.‡∏°."])
    min_area = st.number_input(f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ({area_unit})", min_value=0.0)
    max_area = st.number_input(f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ({area_unit})", min_value=0.0)

# 5. ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å URL
st.markdown("### üåê ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ scrape")
urls = st.text_area("‡πÉ‡∏™‡πà URL ‡∏´‡∏•‡∏≤‡∏¢ URL ‡πÑ‡∏î‡πâ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î", placeholder="https://ddproperty.com/... \nhttps://baandek.com/... ")

# 6. ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏° scraping
start_button = st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° scraping", use_container_width=True)

if start_button:
    if not urls.strip():
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ scrape")
    else:
        st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ scraping ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
        df = pd.DataFrame({
            '‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£': ['‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏§‡∏Å‡∏©‡∏≤', '‡∏™‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏ô‡∏á‡∏≤‡∏°', '‡∏ö‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏Å‡∏≠‡∏Å', '‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î‡∏®‡∏£‡∏µ‡∏ô‡∏Ñ‡∏£'],
            '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô': ['‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå', '‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', '‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î'],
            '‡∏£‡∏≤‡∏Ñ‡∏≤': [2700000, 2200000, 3500000, 4500000, 3000000],
            '‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà': ['35 ‡∏ï‡∏£.‡∏ß‡∏≤', '28 ‡∏ï‡∏£.‡∏ß‡∏≤', '50 ‡∏ï‡∏£.‡∏ß‡∏≤', '60 ‡∏ï‡∏£.‡∏ß‡∏≤', '30 ‡∏ï‡∏£.‡∏ß‡∏≤']
        })

        st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with st.expander("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
            filter_project = st.text_input("‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
            filter_property = st.selectbox("‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô'].unique()))

        # ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if filter_project or filter_property != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            filtered_df = df.copy()
            if filter_project:
                filtered_df = filtered_df[filtered_df['‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].str.contains(filter_project, case=False)]
            if filter_property != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                filtered_df = filtered_df[filtered_df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô'] == filter_property]
            df = filtered_df

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        st.subheader("üîç ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ scraping")
        st.dataframe(df)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel",
            data=df.to_excel(index=False),
            file_name="property_data.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
        st.markdown("### üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ Dashboard")

        total_records = len(df)
        avg_price = df['‡∏£‡∏≤‡∏Ñ‡∏≤'].mean()

        col1, col2 = st.columns(2)
        col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_records)
        col2.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ö‡∏≤‡∏ó)", f"{avg_price:,.2f}")

        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏ß‡∏≤
        df['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏ß‡∏≤'] = df['‡∏£‡∏≤‡∏Ñ‡∏≤'] / df['‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà'].str.replace(' ‡∏ï‡∏£.‡∏ß‡∏≤', '').astype(float)
        fig = px.bar(df, x='‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', y='‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏ß‡∏≤', title='‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏£.‡∏ß‡∏≤ ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£')
        st.plotly_chart(fig)

        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô
        fig2 = px.pie(df, names='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô', title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô')
        st.plotly_chart(fig2)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
        html_table = df.to_html(index=False)
        pdf = pdfkit.from_string(html_table, False)
        st.download_button(
            label="üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF",
            data=pdf,
            file_name="property_data.pdf",
            mime="application/pdf"
        )

